%%% Do not modify this file, it is automatically generated by abnfc.
%%% All changes will be lost when it is regenerated.
%%% Generated by abnfc_gen on 2020-01-25 20:15:46

-module(email_validator_abnf).

-export(['CFWS'/0, 'FWS'/0, 'addr-spec'/0, atext/0,
	 atom/0, ccontent/0, comment/0, ctext/0, decode/2,
	 domain/0, 'domain-literal'/0, 'dot-atom'/0,
	 'dot-atom-text'/0, dtext/0, 'local-part'/0, 'obs-FWS'/0,
	 'obs-NO-WS-CTL'/0, 'obs-ctext'/0, 'obs-domain'/0,
	 'obs-dtext'/0, 'obs-local-part'/0, 'obs-qp'/0,
	 'obs-qtext'/0, qcontent/0, qtext/0, 'quoted-pair'/0,
	 'quoted-string'/0, word/0]).

-include("email_validator_abnf.hrl").

decode('addr-spec', Str) -> ('addr-spec'())(Str);
decode('local-part', Str) -> ('local-part'())(Str);
decode(domain, Str) -> (domain())(Str);
decode('domain-literal', Str) ->
    ('domain-literal'())(Str);
decode(dtext, Str) -> (dtext())(Str);
decode('FWS', Str) -> ('FWS'())(Str);
decode(ctext, Str) -> (ctext())(Str);
decode(ccontent, Str) -> (ccontent())(Str);
decode(comment, Str) -> (comment())(Str);
decode('CFWS', Str) -> ('CFWS'())(Str);
decode(qtext, Str) -> (qtext())(Str);
decode(qcontent, Str) -> (qcontent())(Str);
decode('quoted-string', Str) ->
    ('quoted-string'())(Str);
decode('quoted-pair', Str) -> ('quoted-pair'())(Str);
decode(atext, Str) -> (atext())(Str);
decode(atom, Str) -> (atom())(Str);
decode('dot-atom-text', Str) ->
    ('dot-atom-text'())(Str);
decode('dot-atom', Str) -> ('dot-atom'())(Str);
decode(word, Str) -> (word())(Str);
decode('obs-FWS', Str) -> ('obs-FWS'())(Str);
decode('obs-ctext', Str) -> ('obs-ctext'())(Str);
decode('obs-qtext', Str) -> ('obs-qtext'())(Str);
decode('obs-dtext', Str) -> ('obs-dtext'())(Str);
decode('obs-qp', Str) -> ('obs-qp'())(Str);
decode('obs-NO-WS-CTL', Str) ->
    ('obs-NO-WS-CTL'())(Str);
decode('obs-local-part', Str) ->
    ('obs-local-part'())(Str);
decode('obs-domain', Str) -> ('obs-domain'())(Str).

'addr-spec'() ->
    fun (T) ->
	    __P = '__seq'(['local-part'(),
			   fun ([64 | Tl]) -> {ok, 64, Tl};
			       (_) -> fail
			   end,
			   domain()]),
	    __P(T)
    end.

'local-part'() ->
    fun (T) ->
	    __P = '__alt'(['dot-atom'(), 'quoted-string'(),
			   'obs-local-part'()]),
	    __P(T)
    end.

domain() ->
    fun (T) ->
	    __P = '__alt'(['dot-atom'(), 'domain-literal'(),
			   'obs-domain'()]),
	    __P(T)
    end.

'domain-literal'() ->
    fun (T) ->
	    __P = '__seq'(['__repeat'(0, 1, 'CFWS'()),
			   fun ([91 | Tl]) -> {ok, 91, Tl};
			       (_) -> fail
			   end,
			   '__repeat'(0, infinity,
				      '__seq'(['__repeat'(0, 1, 'FWS'()), dtext()])),
			   '__repeat'(0, 1, 'FWS'()),
			   fun ([93 | Tl]) -> {ok, 93, Tl};
			       (_) -> fail
			   end,
			   '__repeat'(0, 1, 'CFWS'())]),
	    __P(T)
    end.

dtext() ->
    fun (T) ->
	    __P = '__alt'([fun ([C | Tl])
				   when (C >= 33) and (C =< 90) ->
				   {ok, C, Tl};
			       ([C | Tl]) when (C >= 94) and (C =< 126) -> {ok, C, Tl};
			       (_) -> fail
			   end,
			   'obs-dtext'()]),
	    __P(T)
    end.

'FWS'() ->
    fun (T) ->
	    __P = '__alt'(['__seq'(['__repeat'(0, 1,
					       '__seq'(['__repeat'(0, infinity, 'WSP'()),
							'CRLF'()])),
				    '__repeat'(1, infinity, 'WSP'())]),
			   'obs-FWS'()]),
	    __P(T)
    end.

ctext() ->
    fun (T) ->
	    __P = '__alt'([fun ([C | Tl])
				   when (C >= 33) and (C =< 39) ->
				   {ok, C, Tl};
			       ([C | Tl]) when (C >= 42) and (C =< 91) -> {ok, C, Tl};
			       ([C | Tl]) when (C >= 93) and (C =< 126) -> {ok, C, Tl};
			       (_) -> fail
			   end,
			   'obs-ctext'()]),
	    __P(T)
    end.

ccontent() ->
    fun (T) ->
	    __P = '__alt'([ctext(), 'quoted-pair'(), comment()]),
	    __P(T)
    end.

comment() ->
    fun (T) ->
	    __P = '__seq'([fun ([40 | Tl]) -> {ok, 40, Tl};
			       (_) -> fail
			   end,
			   '__repeat'(0, infinity,
				      '__seq'(['__repeat'(0, 1, 'FWS'()), ccontent()])),
			   '__repeat'(0, 1, 'FWS'()),
			   fun ([41 | Tl]) -> {ok, 41, Tl};
			       (_) -> fail
			   end]),
	    __P(T)
    end.

'CFWS'() ->
    fun (T) ->
	    __P = '__alt'(['__seq'(['__repeat'(1, infinity,
					       '__seq'(['__repeat'(0, 1, 'FWS'()),
							comment()])),
				    '__repeat'(0, 1, 'FWS'())]),
			   'FWS'()]),
	    __P(T)
    end.

qtext() ->
    fun (T) ->
	    __P = '__alt'([fun ([C | Tl]) when C == 33 ->
				   {ok, C, Tl};
			       ([C | Tl]) when (C >= 35) and (C =< 91) -> {ok, C, Tl};
			       ([C | Tl]) when (C >= 93) and (C =< 126) -> {ok, C, Tl};
			       (_) -> fail
			   end,
			   'obs-qtext'()]),
	    __P(T)
    end.

qcontent() ->
    fun (T) ->
	    __P = '__alt'([qtext(), 'quoted-pair'()]), __P(T)
    end.

'quoted-string'() ->
    fun (T) ->
	    __P = '__seq'(['__repeat'(0, 1, 'CFWS'()), 'DQUOTE'(),
			   '__repeat'(0, infinity,
				      '__seq'(['__repeat'(0, 1, 'FWS'()), qcontent()])),
			   '__repeat'(0, 1, 'FWS'()), 'DQUOTE'(),
			   '__repeat'(0, 1, 'CFWS'())]),
	    __P(T)
    end.

'quoted-pair'() ->
    fun (T) ->
	    __P = '__alt'(['__seq'([fun ([92 | Tl]) -> {ok, 92, Tl};
					(_) -> fail
				    end,
				    '__alt'(['VCHAR'(), 'WSP'()])]),
			   'obs-qp'()]),
	    __P(T)
    end.

atext() ->
    fun (T) ->
	    __P = '__alt'([fun ([C | Tl]) when C == 33 ->
				   {ok, C, Tl};
			       ([C | Tl]) when (C >= 35) and (C =< 39) -> {ok, C, Tl};
			       ([C | Tl]) when (C >= 42) and (C =< 43) -> {ok, C, Tl};
			       ([C | Tl]) when C == 45 -> {ok, C, Tl};
			       ([C | Tl]) when C == 47 -> {ok, C, Tl};
			       ([C | Tl]) when C == 61 -> {ok, C, Tl};
			       ([C | Tl]) when C == 63 -> {ok, C, Tl};
			       ([C | Tl]) when (C >= 94) and (C =< 96) -> {ok, C, Tl};
			       ([C | Tl]) when (C >= 123) and (C =< 126) ->
				   {ok, C, Tl};
			       (_) -> fail
			   end,
			   'ALPHA'(), 'DIGIT'()]),
	    __P(T)
    end.

atom() ->
    fun (T) ->
	    __P = '__seq'(['__repeat'(0, 1, 'CFWS'()),
			   '__repeat'(1, infinity, atext()),
			   '__repeat'(0, 1, 'CFWS'())]),
	    __P(T)
    end.

'dot-atom-text'() ->
    fun (T) ->
	    __P = '__seq'(['__repeat'(1, infinity, atext()),
			   '__repeat'(0, infinity,
				      '__seq'([fun ([46 | Tl]) -> {ok, 46, Tl};
						   (_) -> fail
					       end,
					       '__repeat'(1, infinity, atext())]))]),
	    __P(T)
    end.

'dot-atom'() ->
    fun (T) ->
	    __P = '__seq'(['__repeat'(0, 1, 'CFWS'()),
			   'dot-atom-text'(), '__repeat'(0, 1, 'CFWS'())]),
	    __P(T)
    end.

word() ->
    fun (T) ->
	    __P = '__alt'([atom(), 'quoted-string'()]), __P(T)
    end.

'obs-FWS'() ->
    fun (T) ->
	    __P = '__seq'(['__repeat'(1, infinity, 'WSP'()),
			   '__repeat'(0, infinity,
				      '__seq'(['CRLF'(),
					       '__repeat'(1, infinity, 'WSP'())]))]),
	    __P(T)
    end.

'obs-ctext'() ->
    fun (T) -> __P = 'obs-NO-WS-CTL'(), __P(T) end.

'obs-qtext'() ->
    fun (T) -> __P = 'obs-NO-WS-CTL'(), __P(T) end.

'obs-dtext'() ->
    fun (T) ->
	    __P = '__alt'(['obs-NO-WS-CTL'(), 'quoted-pair'()]),
	    __P(T)
    end.

'obs-qp'() ->
    fun (T) ->
	    __P = '__seq'([fun ([92 | Tl]) -> {ok, 92, Tl};
			       (_) -> fail
			   end,
			   '__alt'([fun ([C | Tl]) when C == 0 -> {ok, C, Tl};
					(_) -> fail
				    end,
				    'obs-NO-WS-CTL'(), 'LF'(), 'CR'()])]),
	    __P(T)
    end.

'obs-NO-WS-CTL'() ->
    fun (T) ->
	    __P = fun ([C | Tl]) when (C >= 11) and (C =< 12) ->
			  {ok, C, Tl};
		      ([C | Tl]) when C == 127 -> {ok, C, Tl};
		      ([C | Tl]) when (C >= 1) and (C =< 8) -> {ok, C, Tl};
		      ([C | Tl]) when (C >= 14) and (C =< 31) -> {ok, C, Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'obs-local-part'() ->
    fun (T) ->
	    __P = '__seq'([word(),
			   '__repeat'(0, infinity,
				      '__seq'([fun ([46 | Tl]) -> {ok, 46, Tl};
						   (_) -> fail
					       end,
					       word()]))]),
	    __P(T)
    end.

'obs-domain'() ->
    fun (T) ->
	    __P = '__seq'([atom(),
			   '__repeat'(0, infinity,
				      '__seq'([fun ([46 | Tl]) -> {ok, 46, Tl};
						   (_) -> fail
					       end,
					       atom()]))]),
	    __P(T)
    end.

'__alt'([P | Ps]) ->
    fun (T) ->
	    case P(T) of
	      {ok, _R, _T1} = Res -> Res;
	      fail ->
		  case Ps of
		    [] -> fail;
		    _ -> ('__alt'(Ps))(T)
		  end
	    end
    end.

'__repeat'(Min, Max, P) -> '__repeat'(Min, Max, P, 0).

'__repeat'(Min, Max, P, Found) ->
    fun (T) ->
	    case P(T) of
	      {ok, R1, T1} when Max == Found + 1 -> {ok, [R1], T1};
	      {ok, R1, T1} ->
		  case ('__repeat'(Min, Max, P, Found + 1))(T1) of
		    {ok, R2, T2} -> {ok, [R1 | R2], T2};
		    fail when Found >= Min -> {ok, [R1], T1};
		    fail -> fail
		  end;
	      fail when Found >= Min -> {ok, [], T};
	      fail -> fail
	    end
    end.

'__seq'([P | Ps]) ->
    fun (T) ->
	    case P(T) of
	      {ok, R1, T1} ->
		  case ('__seq'(Ps))(T1) of
		    {ok, R2, T2} -> {ok, [R1 | R2], T2};
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end;
'__seq'([]) -> fun (T) -> {ok, [], T} end.
